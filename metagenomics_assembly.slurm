#!/bin/bash

#SBATCH --job-name="metagenome_pipeline"          # Job name
#SBATCH --mail-user=       # Email notifications
#SBATCH --mail-type=FAIL,END                           # Notify on job start, end, and failure
#SBATCH --output=metagenome_pipeline_%j.log       # Log file with job ID
#SBATCH --error=metagenome_pipeline_%j.err        # Error file with job ID

#SBATCH --nodes=1                                 # Request one node
#SBATCH --cpus-per-task=16                        # Number of CPU cores
#SBATCH --mem=64G                                # Memory allocation
#SBATCH --time=72:00:00                           # Time limit (72 hours)


# Author: Feargal J. Ryan
# Date: 2024 - 09 - 02
# GitHub: https://github.com/feargalr/
# Email: feargalr@gmail.com
# Description: Basic Metagenomic assembly analyses
# NB - This is a generic verion of the script. Your precise assembly/binning strategy
# depend on how your samples were sequenced.(e.g. replicates from the same individual)



# Activate conda
source /homes/feargal.ryan/anaconda3/etc/profile.d/conda.sh 

# Activate the conda environment which has everything installed
conda activate /homes/feargal.ryan/anaconda3/envs/metagen_assembly 

# Step 1: MetaSPAdes - Metagenomic Assembly
# MetaSPAdes is a specialized version of the SPAdes genome assembler, optimized for metagenomic data.
# This tool takes paired-end reads (R1 and R2 FASTQ files) as input and assembles them into contigs.
# Contigs are contiguous sequences representing assembled fragments of the genome from the mixed community.
# The output directory will contain the assembled contigs, scaffolds, and other relevant files.

echo "Running MetaSPAdes..."
spades.py --meta -1 R1.fastq.gz -2 R2.fastq.gz -o spades_output -t 16 --memory 64

# Step 2: MetaBAT2 - Metagenomic Binning
# MetaBAT2 is a tool used to bin the contigs generated by MetaSPAdes into groups, known as bins.
# Each bin ideally corresponds to a different organism within the metagenome.
# This step helps in separating the genetic material of different species present in the sample.
# The output will be a set of bins saved in the 'metabat_bins' directory.

echo "Running MetaBAT2..."
cd spades_output
metabat2 -i scaffolds.fasta -o metabat_bins/bin -t 16

# Step 3: GTDB-Tk - Taxonomic Classification
# GTDB-Tk is a toolkit used to assign taxonomy to the bins generated by MetaBAT2.
# It compares the bins against the GTDB (Genome Taxonomy Database) to classify the organisms down to species level.
# This step provides insights into the specific organisms present in the metagenome and their taxonomy.
# The environment variable GTDBTK_DATA_PATH must be set to the directory containing the GTDB reference data.

echo "Running GTDB-Tk..."
# Set the GTDB-Tk data path
export GTDBTK_DATA_PATH=/path/to/gtdbtk/data

# Run GTDB-Tk on the MetaBAT2 bins
gtdbtk classify_wf --genome_dir metabat_bins --out_dir gtdbtk_output --cpus 16

echo "Pipeline completed successfully."
